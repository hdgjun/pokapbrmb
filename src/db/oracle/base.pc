/*
 * base.pc
 *
 *  Created on: 2016Äê12ÔÂ22ÈÕ
 *      Author: Administrator
 */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include <time.h>
#include <errno.h>
#include <pthread.h>
#include "db/db.h"
#include "allcommon.h"
#include "switch.h"

extern Param g_param;

int InitDb()
{
	pthread_key_create(&p_Thread_key,NULL);
	EXEC SQL ENABLE THREADS;
	return SUCESS;
}
int DestroyDb(){
	return SUCESS;
}
int ThreadConnectDB()
{
	int iRet;
	sql_context ctx;

	EXEC SQL CONTEXT ALLOCATE :ctx;
	struct sqlca sqlca;

	char ConOraStr[MAX_STRING_SIZE] = {0};

	sprintf(ConOraStr,"%s/%s@%s",g_param.DBUser,g_param.DBPassword,g_param.DBServiceName);

	EXEC SQL CONTEXT USE :ctx;

	EXEC SQL CONNECT :ConOraStr;

	pthread_setspecific(p_Thread_key,(void *)ctx);
	iRet = JudgeSqlExecResultLocal(0,"Connect oracle",&sqlca);

	return iRet;
}
int DisconnectDB(){
	struct sqlca sqlca;
	sql_context ctx;
	ctx = (sql_context)pthread_getspecific(p_Thread_key);
	EXEC SQL CONTEXT USE :ctx;
	EXEC SQL commit work release;
	return SUCESS;
}
int TestConnectionDB()
{
	struct sqlca sqlca;
	sql_context ctx;
	ctx = (sql_context)pthread_getspecific(p_Thread_key);
	EXEC SQL CONTEXT USE :ctx;
	EXEC SQL BEGIN DECLARE SECTION;
	char  tmpData[1+1];
	EXEC SQL END DECLARE SECTION;
	EXEC SQL SELECT dummy INTO :tmpData FROM dual;

	return JudgeSqlExecResultLocal(0,"TestConnection oracle",&sqlca);
}

int DbsCommit()
{
	struct sqlca sqlca;
	sql_context ctx;
	ctx = (sql_context)pthread_getspecific(p_Thread_key);
	EXEC SQL CONTEXT USE :ctx;
	EXEC SQL commit work;
	return JudgeSqlExecResultLocal(0,"DB commit",&sqlca);
}

int DbsRollback()
{
	struct sqlca sqlca;
	sql_context ctx;
	ctx = (sql_context)pthread_getspecific(p_Thread_key);
	EXEC SQL CONTEXT USE :ctx;
	EXEC SQL rollback work;
	return JudgeSqlExecResultLocal(0,"DB rollback",&sqlca);
}


int	JudgeSqlExecResultLocal(int iFlag,char *szExecText,struct sqlca *sqlca)
{
	if(sqlca->sqlcode == -3114 || sqlca->sqlcode == 3114|| sqlca->sqlcode == -1688||
			sqlca->sqlcode == 1688)
	{
		if(iFlag == 0)
		{
			printf("[%s fail]%s\n",szExecText,sqlca->sqlerrm.sqlerrmc);
		}
		return WARING;
    }else if(sqlca->sqlcode == 0||sqlca->sqlcode == 1405||sqlca->sqlcode== -1405){
    	return SUCESS;
    }else if(sqlca->sqlcode == 1403||sqlca->sqlcode== -1403){
    	return NODATA;
    }
	if(iFlag == 0)
	{
		printf("[%s ERROR %d ]%s\n",szExecText,sqlca->sqlcode,sqlca->sqlerrm.sqlerrmc);
	}
	return ERROR;
}
