#include "db/db.h"
#include "db/dbmoneydataatm.h"
#include "common.h"

int DbsMoneydataAtm(int oprType, ATMRECODE *fileRecord)
{
#if 0
	POKA_MYSQL
	FILERECORD  tmpData;

	char strSql[300+FILE_PATH_CHARNUM*21] = {0};

	memset(&tmpData, 0x00, sizeof(FILERECORD));
	memcpy(&tmpData, fileRecord, sizeof(FILERECORD));

	switch (oprType)
	{
		case DBS_INSERT:
			sprintf(strSql, "%s '%s', str_to_date('%s','%s'), '%s', '%s', '%s', '%s', '%s', '%s', %s, '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s','%s','%s')", insertsql,
				tmpData.MachineSNo,
				tmpData.DateTime,//SYSDATE,	//记录时间
				"%Y-%m-%d %H:%i:%s",
				tmpData.SNo,
				tmpData.MoneyFlag,
				tmpData.Valuta,
				tmpData.Ver,
				tmpData.tfFlag,
				//"90",											//成色
				//"",												//冠字号图像
				tmpData.Operator,//:pfilename->CounterNo,	//操作员(可能导致程序终止)
				"NOW()",										//插入数据库日期
				tmpData.BundleID,							//把条码
				tmpData.PackageId,
				tmpData.Monitor,								//监督员
				tmpData.ImageFilePath,
				tmpData.BusinessType,						//业务类型
				tmpData.MonBoxID,							//钞箱ID
				tmpData.AtmID,								//ATM机ID
				tmpData.AddMonOperator,						//加钞员
				tmpData.AddMonChecker,						//加钞监管员
				//"",
				tmpData.BankNo,
				tmpData.FileName,
				tmpData.AgencyNo
				);
			 mysql_query(pcon, strSql);
			return JudgeSqlExecResultLocal(0,"DBS_INSERT ",pcon);
	}
#endif
   return SUCESS;
}

int FromTmpToAtm(const char *tn,const char *id)
{
	struct sqlca sqlca;
	sql_context ctx;
	ctx = (sql_context)pthread_getspecific(p_Thread_key);
	EXEC SQL CONTEXT USE :ctx;

	EXEC SQL BEGIN DECLARE SECTION;
	char strSql[300+FILE_PATH_CHARNUM*21] = {0};
	EXEC SQL END DECLARE SECTION;

	sprintf(strSql,"INSERT INTO MONEYDATA_ATM(PERCODE,COLTIME,MON,MONTYPE,MONVAL,MONVER,TRUEFLAG,QUANLITY,IMAGEPATH,BUSINESSTYPE,BANKNO,AGENCYNO,BUSINESSID,OPERDATE,RESERVE1,RESERVE2 )(select PERCODE,COLTIME,MON,MONTYPE,MONVAL,MONVER,TRUEFLAG,QUANLITY,IMAGEPATH,BUSINESSTYPE,BANKNO,AGENCYNO,B.ID AS BUSINESSID,B.OPERDATE AS OPERDATE,RESERVE1,RESERVE2 from  %s A, (select '%s' as id, SYSDATE as OPERDATE from DUAL) B)",tn,id);
	EXEC SQL EXECUTE IMMEDIATE :strSql;

	return JudgeSqlExecResultLocal(0,"DBS_INSERT TEMP",&sqlca);
}

int TmpDbsMoneydataAtm(int oprType,const char *tn,ATMRECODE *fileRecord)
{
	struct sqlca sqlca;
	sql_context ctx;
	ctx = (sql_context)pthread_getspecific(p_Thread_key);
	EXEC SQL CONTEXT USE :ctx;

	EXEC SQL BEGIN DECLARE SECTION;
	ATMRECODE  tmpData;
	char strSql[300+FILE_PATH_CHARNUM*21] = {0};
	VARCHAR job[24+1];
	VARCHAR sqlstmt[FILE_PATH_CHARNUM];
	EXEC SQL END DECLARE SECTION;



	if(fileRecord){
		memset(&tmpData, 0x00, sizeof(ATMRECODE));
		memcpy(&tmpData, fileRecord, sizeof(ATMRECODE));
	}
	switch (oprType)
	{
		case DBS_INSERT:
			/*
			sprintf(strSql,"INSERT INTO %s(PERCODE,COLTIME,MON,MONTYPE,MONVAL,MONVER,TRUEFLAG,OPERDATE,IMAGEPATH,BUSINESSTYPE,BANKNO,AGENCYNO) VALUES('%s',to_date(%s,'%s'),'%s','%s',%s,'%s','%c',SYSDATE,'%s','%s','%s','%s')",tn,
					tmpData.percode,
					tmpData.coltime,
					"yyyymmddhh24miss",
					tmpData.mon,
					tmpData.montype,
					tmpData.monval,
					tmpData.monver,
					tmpData.trueflag,
					tmpData.imagepath,
					tmpData.businesstype,
					tmpData.bankno,
					tmpData.agencyno);
			printf("--------[%s]-----------",strSql);
			EXEC SQL EXECUTE IMMEDIATE :strSql;*/

			printf("--------percode[%s]-----------\n",tmpData.percode);
			printf("--------coltime[%s]-----------\n",tmpData.coltime);
			printf("--------mon[%s]-----------\n",tmpData.mon);
			printf("--------montype[%s]-----------\n",tmpData.montype);
			printf("--------monval[%s]-----------\n",tmpData.monval);
			printf("--------monver[%s]-----------\n",tmpData.monver);
			printf("--------imagepath[%s]-----------\n",tmpData.imagepath);
			printf("--------businesstype[%s]-----------\n",tmpData.businesstype);
			printf("--------bankno[%s]-----------\n",tmpData.bankno);
			printf("--------agencyno[%s]-----------\n",tmpData.agencyno);

			sqlstmt.len = sprintf(sqlstmt.arr,"INSERT INTO %s(ID,PERCODE,COLTIME,MON,MONTYPE,MONVAL,MONVER,TRUEFLAG,OPERDATE,IMAGEPATH,BUSINESSTYPE,BANKNO,AGENCYNO) VALUES(0,:v1,to_date(:v2,'yyyymmddhh24miss'),:v3,:v4,:v5,:v6,:v7,SYSDATE,:v8,:v9,:v10,:v11)",tn);
			EXEC SQL PREPARE mystmt FROM :sqlstmt;
			EXEC SQL EXECUTE mystmt USING
			:tmpData.percode,
			:tmpData.coltime,
			:tmpData.mon,
			:tmpData.montype,
			:tmpData.monval,
			:tmpData.monver,
			:tmpData.trueflag,
			:tmpData.imagepath,
			:tmpData.businesstype,
			:tmpData.bankno,
			:tmpData.agencyno;

			return JudgeSqlExecResultLocal(0,"DBS_INSERT TEMP",&sqlca);
		case DBS_CREATE_TEMP:
			sprintf(strSql,"CREATE GLOBAL TEMPORARY TABLE %s ON COMMIT PRESERVE ROWS AS (SELECT * FROM MONEYDATA_ATM WHERE 1=0)",tn);
			//sprintf(strSql,"CREATE  TABLE %s  AS (SELECT * FROM MONEYDATA_ATM WHERE 1=0)",tn);
			EXEC SQL EXECUTE IMMEDIATE :strSql;
			return JudgeSqlExecResultLocal(0,"DBS_CREATE_TEMP",&sqlca);
		case DBS_SELECT:
			sprintf(strSql,"select count(1) from %s ",tn);
			EXEC SQL EXECUTE IMMEDIATE :strSql;
			if(abs(sqlca.sqlcode)==942){
				return ERROR;
			}else{
				return SUCESS;
			}
		case DBS_TRUNCATE:
			sprintf(strSql,"truncate table %s ",tn);
			EXEC SQL EXECUTE IMMEDIATE :strSql;
			return JudgeSqlExecResultLocal(0,"DBS_TRUNCATE",&sqlca);
	}
	return SUCESS;
}
